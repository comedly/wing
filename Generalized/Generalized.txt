#pragma once 

#include<iostream>
#include<assert.h>
using namespace std;

enum Type   //用枚举类型来定义广义表中的三种结点类型
{
	HEAD,   //头类型
	VALUE,  //值类型
	SUB,    //子表类型
};

struct GeneralizedNode
{
	Type _type; //类型
	GeneralizedNode* _next; //指向同层下一个结点
	
	union
	{
		int _value; //一个结点下一节点可能是一个结点也可能是子表结点
		GeneralizedNode* _subLink; //指向子表的指针
	};

	GeneralizedNode(Type type)
		:_type(type)
		,_next(NULL)
		
	{ }
	
	GeneralizedNode(Type type,int value)
		:_type(type)
		,_next(NULL)
		,_value(value)
	{ }

};

class Generalized
{
public:
	Generalized()  //默认构造函数
		:_head(NULL)
	{ }

	Generalized(const char* str) //构造函数
		:_head(NULL)
	{
		_head = _CreateList(str); //调用函数创建结点
	}

	Generalized(const Generalized& gl)  //拷贝函数
	{
		_head = _Copy(gl._head);
	}

	Generalized& operator=(const Generalized& gl) //赋值函数
	{
		if(this != &gl)
		{
			_Copy(gl._head);
			Destroy(_head);
		}
		return *this;
	}

	void Print() //打印
	{
		_Print(_head);
	}

	size_t Size() //求广义表中所有元素的大小 
	{
		return _Size(_head);
	}

	size_t Depth() //求广义表的深度
	{
		return _Depth(_head);
	}

	~Generalized() //析构函数
	{
		Destroy(_head);
	}
	
protected:
	GeneralizedNode* _Copy(GeneralizedNode* gnHead)  //拷贝广义表
	{
		GeneralizedNode* gncur = gnHead;
		GeneralizedNode* newHead = new GeneralizedNode(HEAD);
		GeneralizedNode* newcur = newHead;
		while (gncur)
		{
			if(gncur->_type == VALUE)
			{
				GeneralizedNode* tmp = new GeneralizedNode(VALUE);
				newcur->_next = tmp;
				newcur = newcur->_next;
				newcur->_value = gncur->_value;
			}
			else if(gncur->_type == SUB)
			{
				GeneralizedNode* tmp =new GeneralizedNode(SUB);
				newcur->_next = tmp;
				newcur = newcur->_next;
				newcur->_subLink = _Copy(gncur->_subLink);
			}
			gncur = gncur->_next;
		}
		newcur = NULL;
		return newHead;
	}

	void Destroy(GeneralizedNode* head)//释放所有节点
	{
		GeneralizedNode* cur = head;
		while (cur)
		{
			GeneralizedNode* del = cur;
			cur = cur->_next;
			if(del->_type == SUB)
			{
				Destroy(del->_subLink);
			}
			else
			{
				delete del;
				del = NULL;
			}		
		}
	}

	void _Print(GeneralizedNode* head) //打印
	{
		GeneralizedNode* cur = head;
		while (cur)
		{
			if(cur->_type == HEAD)
			{
				cout<<"(";
			}
			else if(cur->_type == VALUE)
			{
				cout<<(char)(cur->_value);
				if(cur->_next)
				{
					cout<<",";
				}
			}
			else if(cur->_type == SUB)
			{
				//当遇到子表时利用递归
				_Print(cur->_subLink);
				if(cur->_next)
				{
					cout<<",";
				}
			}
			cur = cur->_next;
		}
		cout<<")";
	}

	//判断是否是值
	bool _IsValue(const char* str)
	{
		if(
			(*str > 0 && *str < 9)
			|| (*str > 'a' && *str <'z')
			|| (*str > 'A' && *str <'Z')
			)
		{
			return true;
		}
		else
		{
			return false; 
		}
	}

	GeneralizedNode* _CreateList(const char* str) //创建结点
	{
		assert(*str == '(');
		++str;
		GeneralizedNode* head = new GeneralizedNode(HEAD);
		GeneralizedNode* cur = head;
		while (cur)
		{
			if(_IsValue(str))
			{
				cur->_next = new GeneralizedNode(VALUE,*str);
				cur = cur->_next;
				str++;
			}
			else if(*str == '(')
			{
				GeneralizedNode* SubNode = new GeneralizedNode(SUB);
				cur->_next = SubNode;
				cur = cur->_next;
				SubNode->_subLink = _CreateList(str);
				str++;
			}
			else if(*str == ')')
			{
				str++;
				return head;
			}
			else
			{
				str++;
			}
		}
		cout<<"广义表出错！"<<endl;
		assert(false);
		return head;
	}

	size_t _Size(GeneralizedNode* head)//广义表中所有结点的个数
	{
		GeneralizedNode* cur = head;
		size_t size = 0;
		while (cur)
		{
			if(cur->_type == VALUE)
			{
				size++;
			}
			else if(cur->_type == SUB)
			{
				size += _Size(cur->_subLink);
			}
			cur = cur->_next;
		}
		return size;
	}

	size_t _Depth(GeneralizedNode* head) //广义表的深度
	{
		size_t depth = 1;
		GeneralizedNode* cur = head; 
		while (cur)
		{
			if(cur->_type == SUB)
			{
				size_t curdepth = _Depth(cur->_subLink);
				if(curdepth+1 > depth)
				{
					depth = curdepth+1;
				}
			}
			cur = cur->_next;
		}
		return depth;
	}

protected:
	GeneralizedNode* _head;//头结点
};

void Test()
{
	Generalized gl1("()");
	Generalized gl2("(a,b,(c,d),e,f)");
	Generalized gl3(gl2);
	Generalized gl4 = gl3;
	size_t size = 0;
	size_t depth = 0;

	cout<<"广义表1："<<endl;
	gl1.Print();
	cout<<endl;
	size = gl1.Size();
	cout<<"表1大小："<<size<<endl;
	depth = gl1.Depth();
	cout<<"表1深度："<<depth<<endl<<endl;

	cout<<"广义表2："<<endl;
	gl2.Print();
	cout<<endl;
	size = gl2.Size();
	cout<<"表2大小："<<size<<endl;
	depth = gl2.Depth();
	cout<<"表2深度："<<depth<<endl<<endl;

	cout<<"广义表3："<<endl;
	gl3.Print();
	cout<<endl;
	size = gl3.Size();
	cout<<"表3大小："<<size<<endl;
	depth = gl3.Depth();
	cout<<"表3深度："<<depth<<endl<<endl;

	cout<<"广义表4："<<endl;
	gl4.Print();
	cout<<endl;
	size = gl4.Size();
	cout<<"表4大小："<<size<<endl;
	depth = gl4.Depth();
	cout<<"表4深度："<<depth<<endl<<endl;
}