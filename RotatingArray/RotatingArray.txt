#pragma once

#include<iostream>
using namespace std;

//顺序查找
int MinInOrder(int* numbers,int index1,int index2)
{
	int result = numbers[index1];
	for(int i = index1 + 1;i <= index2;++i)
	{
		if(result > numbers[i])
			result = numbers[i];
	}
	return result;
}

//基于二分查找查找旋转数组中最小值
//原始数组有序

int Min(int* numbers,int length)
{
	if(numbers == NULL || length <= 0)
	{
		throw new exception("Invalid parameters");
	}
	int index1 = 0;
	int index2 = length - 1;
	int indexMid = index1;
	while (numbers[index1] >= numbers[index2])
	{
		if(index2 - index1 == 1)
		{
			indexMid = index2;
			break;
		}
		indexMid = (index1 + index2)/2;
		//如果下标为index1、index2、indexMid 所指向的元素相等，则只能顺序查找
		if(numbers[index1] == numbers[index2] && numbers[index2] == numbers[indexMid])
		{
			return MinInOrder(numbers,index1,index2);
		}
		if(numbers[index1] <= numbers[indexMid])
			index1 = indexMid;
		else if(numbers[index2] >= numbers[indexMid])
		{
			index2 = indexMid;
		}
	}
	return numbers[indexMid];
}

void Test1()
{
	//int a[] = {1,2,3,4,5,6,};
	int a[] = {1,1,1,0,1};
	cout<<Min(a,5)<<endl;
}